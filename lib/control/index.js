"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValue = exports.getDisabled = exports.getName = exports.AbstractControl = exports.Event = void 0;
/**
 * This module provides the parent interfaces for most of the
 * widgets considered 'controls'.
 *
 * Controls allow users to manipulate the state of an application
 * by interacting with widgets on screen. In simpler terms,
 * they are the widgets that accept user input or trigger
 * reactions when the user manipulates them.
 *
 * Generally, we use a streaming based workflow, that is
 * as the user preforms a supported action and event is generated
 * each and every time and some handler is applied to the event.
 */
/** @imports */
const wml_1 = require("@quenk/wml");
const maybe_1 = require("@quenk/noni/lib/data/maybe");
/**
 * Event is the parent class of all events generated by controls.
 */
class Event {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
}
exports.Event = Event;
/**
 * AbstractControl implements the methods of the Control interface.
 */
class AbstractControl extends wml_1.Component {
}
exports.AbstractControl = AbstractControl;
/**
 * getName
 */
const getName = (attrs) => (attrs && attrs.name) ? attrs.name : '';
exports.getName = getName;
/**
 * getDisabled
 */
const getDisabled = (attrs) => (attrs && attrs.disabled) ? attrs.disabled : undefined;
exports.getDisabled = getDisabled;
/**
 * getValue
 */
const getValue = (attrs) => (attrs && attrs.value) ? (0, maybe_1.just)(attrs.value) : (0, maybe_1.nothing)();
exports.getValue = getValue;
//# sourceMappingURL=index.js.map