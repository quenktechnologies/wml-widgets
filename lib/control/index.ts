import * as wml from '@quenk/wml';

/**
 * ControlAttrsProperties 
 */
export interface ControlAttrsProperties {

    /**
     * name of the control.
     */
    name: string,

    /**
     * class allows for additional styles to be applied to the root of 
     * the control's view.
     */
    class?: string,

    /**
     * disabled indicates the control should not be interactable.
     */
    disabled?: boolean,

}

/**
 * ControlAttrs supported.
 */
export interface ControlAttrs extends wml.Attrs {

    ww: ControlAttrsProperties;

}

/**
 * Control 
 */
export interface Control<A extends ControlAttrs> extends wml.Component<A> { }

/**
 * Delegate allows for the interception of all supported control events.
 */
export interface Delegate<V> {

    /**
     * onChange handler.
     */
    onChange?: (e: Event<V>) => void

    /**
    * onClick handler.
    */
    onClick?: (e: Event<V>) => void,

    /**
     * onSelect handler.
     */
    onSelect?: (e: Event<V>) => void

}

/**
 * DefaultDelegateAttrs are the callbacks the DefaultDelegate will adapt to.
 */
export interface DefaultDelegateAttrs<V> {

    /**
     * onChange handler.
     */
    onChange?: (e: Event<V>) => void

    /**
    * onClick handler.
    */
    onClick?: (e: Event<V>) => void,

    /**
     * onSelect handler.
     */
    onSelect?: (e: Event<V>) => void


}

/**
 * Event is the parent class of all events generated by controls.
 */
export class Event<V> {

    constructor(public name: string, public value:V) { }

}

/**
 * DefaultDelegate fowards all events to their corresponding
 * function handlers, specifed on the attributes of a control.
 */
export class DefaultDelegate<A> implements Delegate<A> {

    constructor(public attrs: DefaultDelegateAttrs<A>) { }

    onClick = (e: Event<A>): void =>
        this.attrs.onClick ? this.attrs.onClick(e) : null;

    onChange = (e: Event<A>): void =>
        this.attrs.onChange ? this.attrs.onChange(e) : null;

    onSelect = (e: Event<A>): void =>
        this.attrs.onSelect ? this.attrs.onSelect(e) : null;

}
