@import "bootstrap/mixins/clearfix";

/**
 * span generates modifier classes for column row span.
 *
 * @param {int} @step  - The current step.
 * @param {int} @total - The total number of columns.
 */
.span(@step, @total:@grid-columns) when(@step =< @total) {

  &.-span@{step} {

    width: percentage((@step / @total));

  }

  .span(@step+1; @total);

}

/**
 * offset generates a left margin offset for a step in the
 * offset scale.
 *
 * Uses a left-margin.
 * @param {int} @step - The offset step.
 * @parm  {int} @total - Total number of columns
 */
.offset(@step; @total:@grid-columns) when(@step =< @total){

  &.-offset@{step} {

    margin-left: percentage((@step / @total));

  }

  .offset(@step+1; @total);

}

/**
 * The wml-widgets non-flex based grid layout framework.
 * 
 * Based on the bootstrap framework.
 * TODO: bring styles here:
 * We intend to replace the col-md-* stuff with individual 
 * modifier classes in a scale like : -x1 -x2 -x3 -x4 -x5 -x6.
*  
 * Each one of these will have style variables attached.
 */
.__GRID_LAYOUT__ {

  padding-top:@grid-layout-padding-vertical;
  padding-right: ceil((@grid-layout-gutter-width / 2));
  padding-bottom:@grid-layout-padding-vertical;
  padding-left:  floor((@grid-layout-gutter-width / 2));
  margin: @grid-layout-margin-vertical auto;
  
  &:extend(.clearfix all); //@todo resolve this clearfix thing.

  /**
   * Rows group columns together, ideally on the same line but overflows
   * are allowed.
   */
   & > .__GRID_LAYOUT_ROW__ {

    padding:@grid-layout-row-padding-vertical @grid-layout-row-padding-horizontal;
    margin-left: ceil((@grid-layout-gutter-width / -2));
    margin-right: floor((@grid-layout-gutter-width / -2));
    margin-top: @grid-layout-row-margin-vertical;
    margin-bottom: @grid-layout-row-margin-vertical;

    &:extend(.clearfix all);

    /**
     * Style the columns within a row.
     *
     * Columns should always be within a row.
     */
    & > .__GRID_LAYOUT_COLUMN__ {

      min-height: 1px; // Prevent columns from collapsing when empty
      padding-left:  ceil((@grid-layout-gutter-width / 2));
      padding-right: floor((@grid-layout-gutter-width / 2));
      margin: @grid-layout-margin-vertical @grid-layout-column-margin-horizontal;
      position: relative;

      /**
       * These styles only kick in when the screen is large enough.
       * For smaller screens each column fills the whole row.
       * @todo: do not depend on bootstrap's variable, also
       * we should support more breakpoints for phones etc.
       * What we do want is to not have col-md, col-sm col-xs crap,
       * instead just 'ww-column' that adjusts through other classes
       * or media queries.
       */
      @media (min-width: @screen-md-min) {

        float:left;
        .span(1);
        .offset(1);

      }

    }

  }

}
